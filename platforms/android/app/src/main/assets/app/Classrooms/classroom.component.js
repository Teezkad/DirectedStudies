"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var Classroom_model_1 = require("../models/Classroom.model");
var services_1 = require("../services");
var router_extensions_1 = require("nativescript-angular/router/router-extensions");
var router_1 = require("@angular/router");
var classroomComponent = /** @class */ (function () {
    function classroomComponent(routerExtensions, firebaseService, router) {
        this.routerExtensions = routerExtensions;
        this.firebaseService = firebaseService;
        this.router = router;
        this.create = new Classroom_model_1.Classroom();
        this.create.id = Number(new Date());
        this.create.name = "";
        this.create.professor = "";
        this.create.institution = "";
        this.create.members = [];
        this.create.classCode = "";
        this.create.year = "";
        //this.create.UID = BackendService.token;
    }
    classroomComponent.prototype.addClass = function () {
        var _this = this;
        this.firebaseService.addClassroom(this.create.id, this.create.name, this.create.professor, this.create.institution, this.create.members, this.create.classCode, this.create.year, this.create.UID).then(function (message) {
            alert(message);
            console.log("Classroom " + _this.create.name);
        });
        this.routerExtensions.navigate(["/home"]);
    };
    classroomComponent = __decorate([
        core_1.Component({
            selector: "classroom",
            moduleId: module.id,
            templateUrl: 'classroom.component.html'
        }),
        __metadata("design:paramtypes", [router_extensions_1.RouterExtensions,
            services_1.FirebaseService,
            router_1.Router])
    ], classroomComponent);
    return classroomComponent;
}());
exports.classroomComponent = classroomComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xhc3Nyb29tLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNsYXNzcm9vbS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBd0M7QUFHeEMsNkRBQW1EO0FBQ25ELHdDQUE0QztBQUU1QyxtRkFBaUY7QUFLakYsMENBQXVDO0FBZXZDO0lBSUcsNEJBQW9CLGdCQUFrQyxFQUM3QyxlQUFnQyxFQUNoQyxNQUFjO1FBRkgscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUM3QyxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFDaEMsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUVsQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksMkJBQVMsRUFBRSxDQUFDO1FBQzFCLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxHQUFJLE1BQU0sQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEdBQUUsRUFBRSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztRQUMzQixJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUM7UUFDN0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEdBQUUsRUFBRSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztRQUMzQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7UUFDdkIseUNBQXlDO0lBRWhELENBQUM7SUFFTCxxQ0FBUSxHQUFSO1FBQUEsaUJBVUM7UUFURyxJQUFJLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFDckYsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQ3RGLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUMsT0FBVztZQUU5QixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFZixPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksR0FBRyxLQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQy9DLENBQUMsQ0FBQyxDQUFBO1FBQ0YsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQTlCWSxrQkFBa0I7UUFOOUIsZ0JBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxXQUFXO1lBQ3JCLFFBQVEsRUFBRSxNQUFNLENBQUMsRUFBRTtZQUNuQixXQUFXLEVBQUUsMEJBQTBCO1NBQzFDLENBQUM7eUNBTXVDLG9DQUFnQjtZQUM1QiwwQkFBZTtZQUN4QixlQUFNO09BTmIsa0JBQWtCLENBK0I5QjtJQUFELHlCQUFDO0NBQUEsQUEvQkQsSUErQkM7QUEvQlksZ0RBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMvT2JzZXJ2YWJsZSc7XHJcbmltcG9ydCB7VXNlcn0gZnJvbSAnLi4vbW9kZWxzLyc7XHJcbmltcG9ydCB7Q2xhc3Nyb29tfSBmcm9tICcuLi9tb2RlbHMvQ2xhc3Nyb29tLm1vZGVsJ1xyXG5pbXBvcnQge0ZpcmViYXNlU2VydmljZX0gZnJvbSAnLi4vc2VydmljZXMnO1xyXG5pbXBvcnQge3Byb21wdH0gZnJvbSBcInVpL2RpYWxvZ3NcIjtcclxuaW1wb3J0IHsgUm91dGVyRXh0ZW5zaW9ucyB9IGZyb20gJ25hdGl2ZXNjcmlwdC1hbmd1bGFyL3JvdXRlci9yb3V0ZXItZXh0ZW5zaW9ucyc7XHJcbmltcG9ydCB7IEV2ZW50RGF0YSB9IGZyb20gXCJkYXRhL29ic2VydmFibGVcIjtcclxuaW1wb3J0IHsgUmFkU2lkZURyYXdlciB9IGZyb20gXCJuYXRpdmVzY3JpcHQtcHJvLXVpL3NpZGVkcmF3ZXJcIjtcclxuaW1wb3J0IHsgdG9wbW9zdCB9IGZyb20gXCJ1aS9mcmFtZVwiO1xyXG5pbXBvcnQgeyBOYXZpZ2F0ZWREYXRhLCBQYWdlLCAgfSBmcm9tIFwidWkvcGFnZVwiO1xyXG5pbXBvcnQge1JvdXRlcn0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuaW1wb3J0IGZpcmViYXNlID0gcmVxdWlyZShcIm5hdGl2ZXNjcmlwdC1wbHVnaW4tZmlyZWJhc2VcIik7XHJcbmltcG9ydCB7IE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvc3JjL21ldGFkYXRhL2xpZmVjeWNsZV9ob29rcyc7XHJcbmltcG9ydCBvYnNlcnZhYmxlTW9kdWxlID0gcmVxdWlyZShcImRhdGEvb2JzZXJ2YWJsZVwiKTtcclxuaW1wb3J0IHsgQmFja2VuZFNlcnZpY2UgfSBmcm9tIFwiLi4vc2VydmljZXMvYmFja2VuZC5zZXJ2aWNlXCI7XHJcbmltcG9ydCB7IERyYXdlclRyYW5zaXRpb25CYXNlLCBTbGlkZUluT25Ub3BUcmFuc2l0aW9uIH0gZnJvbSBcIm5hdGl2ZXNjcmlwdC1wcm8tdWkvc2lkZWRyYXdlclwiO1xyXG5pbXBvcnQgeyBSYWRTaWRlRHJhd2VyQ29tcG9uZW50IH0gZnJvbSBcIm5hdGl2ZXNjcmlwdC1wcm8tdWkvc2lkZWRyYXdlci9hbmd1bGFyXCI7XHJcblxyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogXCJjbGFzc3Jvb21cIixcclxuICAgIG1vZHVsZUlkOiBtb2R1bGUuaWQsXHJcbiAgICB0ZW1wbGF0ZVVybDogJ2NsYXNzcm9vbS5jb21wb25lbnQuaHRtbCdcclxufSlcclxuXHJcbmV4cG9ydCBjbGFzcyBjbGFzc3Jvb21Db21wb25lbnQge1xyXG5cclxuICAgcHVibGljIGNyZWF0ZSA6IENsYXNzcm9vbTtcclxuXHJcbiAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcm91dGVyRXh0ZW5zaW9uczogUm91dGVyRXh0ZW5zaW9ucyxcclxuICAgIHByaXZhdGUgZmlyZWJhc2VTZXJ2aWNlOiBGaXJlYmFzZVNlcnZpY2UsXHJcbiAgICBwcml2YXRlIHJvdXRlcjogUm91dGVyXHJcbiAgICApIHtcclxuICAgICAgICB0aGlzLmNyZWF0ZSA9IG5ldyBDbGFzc3Jvb20oKTtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGUuaWQgPSAgTnVtYmVyKG5ldyBEYXRlKCkpO1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZS5uYW1lPSBcIlwiO1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZS5wcm9mZXNzb3IgPSBcIlwiO1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZS5pbnN0aXR1dGlvbiA9IFwiXCI7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlLm1lbWJlcnM9IFtdO1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZS5jbGFzc0NvZGUgPSBcIlwiO1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZS55ZWFyID0gXCJcIjtcclxuICAgICAgICAgICAvL3RoaXMuY3JlYXRlLlVJRCA9IEJhY2tlbmRTZXJ2aWNlLnRva2VuO1xyXG5cclxuICAgIH1cclxuXHJcbmFkZENsYXNzKCl7XHJcbiAgICB0aGlzLmZpcmViYXNlU2VydmljZS5hZGRDbGFzc3Jvb20odGhpcy5jcmVhdGUuaWQsIHRoaXMuY3JlYXRlLm5hbWUsIHRoaXMuY3JlYXRlLnByb2Zlc3NvcixcclxuICAgICAgICB0aGlzLmNyZWF0ZS5pbnN0aXR1dGlvbiwgIHRoaXMuY3JlYXRlLm1lbWJlcnMsIHRoaXMuY3JlYXRlLmNsYXNzQ29kZSwgdGhpcy5jcmVhdGUueWVhciwgXHJcbiAgICAgICAgdGhpcy5jcmVhdGUuVUlEKS50aGVuKChtZXNzYWdlOmFueSkgPT4ge1xyXG4gICAgICBcclxuICAgICAgICAgICAgYWxlcnQobWVzc2FnZSk7XHJcbiAgICAgICBcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJDbGFzc3Jvb20gXCIgKyB0aGlzLmNyZWF0ZS5uYW1lKTtcclxuICAgICAgICAgIH0pIFxyXG4gICAgICAgICAgdGhpcy5yb3V0ZXJFeHRlbnNpb25zLm5hdmlnYXRlKFtcIi9ob21lXCJdKTtcclxufSAgICBcclxufSJdfQ==