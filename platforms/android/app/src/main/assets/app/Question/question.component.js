"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_1 = require("@angular/core");
var _1 = require("../models/");
var services_1 = require("../services");
var router_extensions_1 = require("nativescript-angular/router/router-extensions");
var router_1 = require("@angular/router");
var backend_service_1 = require("../services/backend.service");
var router_2 = require("@angular/router");
var questionComponent = /** @class */ (function () {
    function questionComponent(routerExtensions, firebaseService, router, route) {
        var _this = this;
        this.routerExtensions = routerExtensions;
        this.firebaseService = firebaseService;
        this.router = router;
        this.route = route;
        this.route.queryParams.subscribe(function (params) {
            _this.tid = params["Tid"];
            _this.tname = params["Tname"];
        });
        this.option1 = new _1.Options();
        this.option1.name = "";
        this.option1.questionId;
        this.option1.isAnswer = false;
        this.option2 = new _1.Options();
        this.option2.name = "";
        this.option2.questionId;
        this.option2.isAnswer = false;
        this.option3 = new _1.Options();
        this.option3.name = "";
        this.option3.questionId;
        this.option3.isAnswer = false;
        this.option4 = new _1.Options();
        this.option4.name = "";
        this.option4.questionId;
        this.option4.isAnswer = false;
        this.question = new _1.Question();
        this.question.name = "";
        this.question.questionTypeId = this.tid; //recieves tag id from tag page
        this.question.Tags = this.tname; //recieve tag name from tag page
        this.question.CID = backend_service_1.BackendService.CID;
        this.question.UID = backend_service_1.BackendService.token;
        this.question.options = [this.option1, this.option2, this.option3, this.option4];
    }
    questionComponent.prototype.onChange1 = function () {
        this.option1.isAnswer = !this.option1.isAnswer;
    };
    questionComponent.prototype.onChange2 = function () {
        this.option2.isAnswer = !this.option2.isAnswer;
        console.log(this.option2.isAnswer);
    };
    questionComponent.prototype.onChange3 = function () {
        this.option3.isAnswer = !this.option3.isAnswer;
    };
    questionComponent.prototype.onChange4 = function () {
        this.option4.isAnswer = !this.option4.isAnswer;
    };
    questionComponent.prototype.submitQuestion = function () {
        var _this = this;
        if (backend_service_1.BackendService.instructor == true) {
            this.firebaseService.addQuestion(this.question.name, this.question.Tags, this.question.questionTypeId, this.question.options, this.question.UID).then(function (message) {
                alert(message);
                console.log("Question created ");
                _this.router.navigate(["search"]);
            });
        }
        else {
            this.firebaseService.addQuestionRequest(this.question.name, this.question.Tags, this.question.questionTypeId, this.question.options, this.question.UID, backend_service_1.BackendService.studentNum).then(function (message) {
                alert(message);
                console.log("Question created ");
                _this.router.navigate(["search"]);
            });
        }
        // console.log(this.option1.isAnswer);
        // console.log(this.option2.isAnswer);
        // console.log(this.option3.isAnswer);
        // console.log(this.option4.isAnswer);
    };
    questionComponent = tslib_1.__decorate([
        core_1.Component({
            selector: "question",
            moduleId: module.id,
            templateUrl: 'question.component.html'
        }),
        tslib_1.__metadata("design:paramtypes", [router_extensions_1.RouterExtensions,
            services_1.FirebaseService,
            router_1.Router, router_2.ActivatedRoute])
    ], questionComponent);
    return questionComponent;
}());
exports.questionComponent = questionComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlc3Rpb24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicXVlc3Rpb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHNDQUF3QztBQUV4QywrQkFBbUQ7QUFFbkQsd0NBQTRDO0FBRTVDLG1GQUFpRjtBQUtqRiwwQ0FBdUM7QUFLdkMsK0RBQTZEO0FBRzdELDBDQUErQztBQVUvQztJQVVHLDJCQUFvQixnQkFBa0MsRUFDN0MsZUFBZ0MsRUFDaEMsTUFBYyxFQUFVLEtBQXFCO1FBRnRELGlCQXNDRTtRQXRDa0IscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUM3QyxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFDaEMsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUFVLFVBQUssR0FBTCxLQUFLLENBQWdCO1FBRWpELElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxVQUFBLE1BQU07WUFDbkMsS0FBSSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDekIsS0FBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDakMsQ0FBQyxDQUFDLENBQUE7UUFFRixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksVUFBTyxFQUFFLENBQUM7UUFDekIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFFO1FBQ3pCLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztRQUU5QixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksVUFBTyxFQUFFLENBQUM7UUFDN0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxPQUFPLENB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QUFJLENBQUMsZUFBZSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUN2RyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxnQ0FBYyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFDLE9BQVc7Z0JBRWxGLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFFZixPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUM7Z0JBQ2pDLEtBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNuQyxDQUFDLENBQUMsQ0FBQTtRQUNWLENBQUM7UUFDSCxzQ0FBc0M7UUFDdEMsc0NBQXNDO1FBQ3RDLHNDQUFzQztRQUN0QyxzQ0FBc0M7SUFJMUMsQ0FBQztJQWhHUSxpQkFBaUI7UUFON0IsZ0JBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxVQUFVO1lBQ3BCLFFBQVEsRUFBRSxNQUFNLENBQUMsRUFBRTtZQUNuQixXQUFXLEVBQUUseUJBQXlCO1NBQ3pDLENBQUM7aURBWXVDLG9DQUFnQjtZQUM1QiwwQkFBZTtZQUN4QixlQUFNLEVBQWlCLHVCQUFjO09BWjVDLGlCQUFpQixDQWtHN0I7SUFBRCx3QkFBQztDQUFBLEFBbEdELElBa0dDO0FBbEdZLDhDQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50fSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzL09ic2VydmFibGUnO1xyXG5pbXBvcnQge1VzZXIsIFF1ZXN0aW9uLCBPcHRpb25zfSBmcm9tICcuLi9tb2RlbHMvJztcclxuaW1wb3J0IHtDbGFzc3Jvb219IGZyb20gJy4uL21vZGVscy9DbGFzc3Jvb20ubW9kZWwnXHJcbmltcG9ydCB7RmlyZWJhc2VTZXJ2aWNlfSBmcm9tICcuLi9zZXJ2aWNlcyc7XHJcbmltcG9ydCB7cHJvbXB0fSBmcm9tIFwidWkvZGlhbG9nc1wiO1xyXG5pbXBvcnQgeyBSb3V0ZXJFeHRlbnNpb25zIH0gZnJvbSAnbmF0aXZlc2NyaXB0LWFuZ3VsYXIvcm91dGVyL3JvdXRlci1leHRlbnNpb25zJztcclxuaW1wb3J0IHsgRXZlbnREYXRhIH0gZnJvbSBcImRhdGEvb2JzZXJ2YWJsZVwiO1xyXG5pbXBvcnQgeyBSYWRTaWRlRHJhd2VyIH0gZnJvbSBcIm5hdGl2ZXNjcmlwdC1wcm8tdWkvc2lkZWRyYXdlclwiO1xyXG5pbXBvcnQgeyB0b3Btb3N0IH0gZnJvbSBcInVpL2ZyYW1lXCI7XHJcbmltcG9ydCB7IE5hdmlnYXRlZERhdGEsIFBhZ2UsICB9IGZyb20gXCJ1aS9wYWdlXCI7XHJcbmltcG9ydCB7Um91dGVyfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5pbXBvcnQgZmlyZWJhc2UgPSByZXF1aXJlKFwibmF0aXZlc2NyaXB0LXBsdWdpbi1maXJlYmFzZVwiKTtcclxuaW1wb3J0IHsgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZS9zcmMvbWV0YWRhdGEvbGlmZWN5Y2xlX2hvb2tzJztcclxuaW1wb3J0IG9ic2VydmFibGVNb2R1bGUgPSByZXF1aXJlKFwiZGF0YS9vYnNlcnZhYmxlXCIpO1xyXG5pbXBvcnQgb2JzZXJ2YWJsZSA9IHJlcXVpcmUoXCJkYXRhL29ic2VydmFibGVcIik7XHJcbmltcG9ydCB7IEJhY2tlbmRTZXJ2aWNlIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2JhY2tlbmQuc2VydmljZVwiO1xyXG5pbXBvcnQgeyBEcmF3ZXJUcmFuc2l0aW9uQmFzZSwgU2xpZGVJbk9uVG9wVHJhbnNpdGlvbiB9IGZyb20gXCJuYXRpdmVzY3JpcHQtcHJvLXVpL3NpZGVkcmF3ZXJcIjtcclxuaW1wb3J0IHsgUmFkU2lkZURyYXdlckNvbXBvbmVudCB9IGZyb20gXCJuYXRpdmVzY3JpcHQtcHJvLXVpL3NpZGVkcmF3ZXIvYW5ndWxhclwiO1xyXG5pbXBvcnQge0FjdGl2YXRlZFJvdXRlfSBmcm9tIFwiQGFuZ3VsYXIvcm91dGVyXCI7XHJcblxyXG5cclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6IFwicXVlc3Rpb25cIixcclxuICAgIG1vZHVsZUlkOiBtb2R1bGUuaWQsXHJcbiAgICB0ZW1wbGF0ZVVybDogJ3F1ZXN0aW9uLmNvbXBvbmVudC5odG1sJ1xyXG59KVxyXG5cclxuZXhwb3J0IGNsYXNzIHF1ZXN0aW9uQ29tcG9uZW50e1xyXG5cclxuICAgcHVibGljIHF1ZXN0aW9uIDogUXVlc3Rpb247XHJcbiAgIHB1YmxpYyBvcHRpb24xIDogT3B0aW9ucztcclxuICAgcHVibGljIG9wdGlvbjIgOiBPcHRpb25zO1xyXG4gICBwdWJsaWMgb3B0aW9uMyA6IE9wdGlvbnM7XHJcbiAgIHB1YmxpYyBvcHRpb240IDogT3B0aW9ucztcclxuICAgcHVibGljIHRpZDtcclxuICAgcHVibGljIHRuYW1lO1xyXG5cclxuICAgY29uc3RydWN0b3IocHJpdmF0ZSByb3V0ZXJFeHRlbnNpb25zOiBSb3V0ZXJFeHRlbnNpb25zLFxyXG4gICAgcHJpdmF0ZSBmaXJlYmFzZVNlcnZpY2U6IEZpcmViYXNlU2VydmljZSxcclxuICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsIHByaXZhdGUgcm91dGU6IEFjdGl2YXRlZFJvdXRlXHJcbiAgICApIHtcclxuICAgICAgICB0aGlzLnJvdXRlLnF1ZXJ5UGFyYW1zLnN1YnNjcmliZShwYXJhbXMgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnRpZCA9IHBhcmFtc1tcIlRpZFwiXTtcclxuICAgICAgICAgICAgdGhpcy50bmFtZSA9IHBhcmFtc1tcIlRuYW1lXCJdO1xyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIHRoaXMub3B0aW9uMSA9IG5ldyBPcHRpb25zKCk7XHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9uMS5uYW1lID0gXCJcIjtcclxuICAgICAgICAgICAgdGhpcy5vcHRpb24xLnF1ZXN0aW9uSWQgO1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbjEuaXNBbnN3ZXIgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9uMiA9IG5ldyBPcHRpb25zKCk7XHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9uMi5uYW1lID0gXCJcIjtcclxuICAgICAgICAgICAgdGhpcy5vcHRpb24yLnF1ZXN0aW9uSWQ7XHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9uMi5pc0Fuc3dlciA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5vcHRpb24zID0gbmV3IE9wdGlvbnMoKTtcclxuICAgICAgICAgICAgdGhpcy5vcHRpb24zLm5hbWUgPSBcIlwiO1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbjMucXVlc3Rpb25JZDtcclxuICAgICAgICAgICAgdGhpcy5vcHRpb24zLmlzQW5zd2VyID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbjQgPSBuZXcgT3B0aW9ucygpO1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbjQubmFtZSA9IFwiXCI7XHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9uNC5xdWVzdGlvbklkIDtcclxuICAgICAgICAgICAgdGhpcy5vcHRpb240LmlzQW5zd2VyID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHRoaXMucXVlc3Rpb24gPSBuZXcgUXVlc3Rpb24oKTtcclxuICAgICAgICAgICAgdGhpcy5xdWVzdGlvbi5uYW1lPSBcIlwiO1xyXG4gICAgICAgICAgICB0aGlzLnF1ZXN0aW9uLnF1ZXN0aW9uVHlwZUlkID0gdGhpcy50aWQ7IC8vcmVjaWV2ZXMgdGFnIGlkIGZyb20gdGFnIHBhZ2VcclxuICAgICAgICAgICAgdGhpcy5xdWVzdGlvbi5UYWdzID0gdGhpcy50bmFtZTsgLy9yZWNpZXZlIHRhZyBuYW1lIGZyb20gdGFnIHBhZ2VcclxuICAgICAgICAgICAgdGhpcy5xdWVzdGlvbi5DSUQ9IEJhY2tlbmRTZXJ2aWNlLkNJRDtcclxuICAgICAgICAgICAgdGhpcy5xdWVzdGlvbi5VSUQ9IEJhY2tlbmRTZXJ2aWNlLnRva2VuO1xyXG4gICAgICAgICAgICB0aGlzLnF1ZXN0aW9uLm9wdGlvbnMgPSBbdGhpcy5vcHRpb24xLCB0aGlzLm9wdGlvbjIsIHRoaXMub3B0aW9uMywgdGhpcy5vcHRpb240XTtcclxuICAgICAgICAgICBcclxuXHJcbiAgICB9XHJcblxyXG4gICAgXHJcbiAgICBwdWJsaWMgdXNlcnMkOiBPYnNlcnZhYmxlPGFueT47XHJcbiAgICBwdWJsaWMgY2xhc3Nyb29tcyQ6IE9ic2VydmFibGU8YW55PjtcclxuXHJcblxyXG4gICAgcHVibGljIG9uQ2hhbmdlMSgpe1xyXG4gICAgdGhpcy5vcHRpb24xLmlzQW5zd2VyID0gIXRoaXMub3B0aW9uMS5pc0Fuc3dlcjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb25DaGFuZ2UyKCl7XHJcbiAgICAgICAgdGhpcy5vcHRpb24yLmlzQW5zd2VyID0gIXRoaXMub3B0aW9uMi5pc0Fuc3dlcjtcclxuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLm9wdGlvbjIuaXNBbnN3ZXIpO1xyXG4gICAgICAgIH1cclxuICAgIHB1YmxpYyBvbkNoYW5nZTMoKXtcclxuICAgICAgICB0aGlzLm9wdGlvbjMuaXNBbnN3ZXIgPSAhdGhpcy5vcHRpb24zLmlzQW5zd2VyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICBwdWJsaWMgb25DaGFuZ2U0KCl7XHJcbiAgICAgICAgdGhpcy5vcHRpb240LmlzQW5zd2VyID0gIXRoaXMub3B0aW9uNC5pc0Fuc3dlcjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3VibWl0UXVlc3Rpb24oKXtcclxuXHJcbiAgICAgICAgaWYgKEJhY2tlbmRTZXJ2aWNlLmluc3RydWN0b3IgPT0gdHJ1ZSl7XHJcbiAgICAgICAgdGhpcy5maXJlYmFzZVNlcnZpY2UuYWRkUXVlc3Rpb24odGhpcy5xdWVzdGlvbi5uYW1lLHRoaXMucXVlc3Rpb24uVGFncywgdGhpcy5xdWVzdGlvbi5xdWVzdGlvblR5cGVJZCxcclxuICAgICAgICB0aGlzLnF1ZXN0aW9uLm9wdGlvbnMsIHRoaXMucXVlc3Rpb24uVUlEKS50aGVuKChtZXNzYWdlOmFueSkgPT4ge1xyXG4gICAgICBcclxuICAgICAgICAgICAgYWxlcnQobWVzc2FnZSk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUXVlc3Rpb24gY3JlYXRlZCBcIik7XHJcbiAgICAgICAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFtcInNlYXJjaFwiXSk7XHJcbiAgICAgICAgICB9KSB9ZWxzZXtcclxuICAgICAgICAgICAgdGhpcy5maXJlYmFzZVNlcnZpY2UuYWRkUXVlc3Rpb25SZXF1ZXN0KHRoaXMucXVlc3Rpb24ubmFtZSx0aGlzLnF1ZXN0aW9uLlRhZ3MsIHRoaXMucXVlc3Rpb24ucXVlc3Rpb25UeXBlSWQsXHJcbiAgICAgICAgICAgICAgICB0aGlzLnF1ZXN0aW9uLm9wdGlvbnMsIHRoaXMucXVlc3Rpb24uVUlELCBCYWNrZW5kU2VydmljZS5zdHVkZW50TnVtKS50aGVuKChtZXNzYWdlOmFueSkgPT4ge1xyXG4gICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGFsZXJ0KG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlF1ZXN0aW9uIGNyZWF0ZWQgXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFtcInNlYXJjaFwiXSk7XHJcbiAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2codGhpcy5vcHRpb24xLmlzQW5zd2VyKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLm9wdGlvbjIuaXNBbnN3ZXIpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMub3B0aW9uMy5pc0Fuc3dlcik7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2codGhpcy5vcHRpb240LmlzQW5zd2VyKTtcclxuXHJcblxyXG5cclxuICAgIH1cclxuXHJcbn0iXX0=