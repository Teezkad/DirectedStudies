"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var _1 = require("../models/");
var services_1 = require("../services");
var router_extensions_1 = require("nativescript-angular/router/router-extensions");
var router_1 = require("@angular/router");
var backend_service_1 = require("../services/backend.service");
var router_2 = require("@angular/router");
var messageDetailsComponent = /** @class */ (function () {
    function messageDetailsComponent(routerExtensions, firebaseService, router, route) {
        var _this = this;
        this.routerExtensions = routerExtensions;
        this.firebaseService = firebaseService;
        this.router = router;
        this.route = route;
        this.route.queryParams.subscribe(function (params) {
            _this.rid = params["Rid"];
        });
        this.option1 = new _1.Options();
        this.option1.name = "";
        this.option1.questionId;
        this.option1.isAnswer = false;
        this.option2 = new _1.Options();
        this.option2.name = "";
        this.option2.questionId;
        this.option2.isAnswer = false;
        this.option3 = new _1.Options();
        this.option3.name = "";
        this.option3.questionId;
        this.option3.isAnswer = false;
        this.option4 = new _1.Options();
        this.option4.name = "";
        this.option4.questionId;
        this.option4.isAnswer = false;
        this.question = new _1.Question();
        this.question.name = "";
        this.question.questionTypeId; //recieves tag id from tag page
        this.question.Tags = this.tname; //recieve tag name from tag page
        this.question.CID = backend_service_1.BackendService.CID;
        this.question.UID = backend_service_1.BackendService.token;
        this.question.options = [this.option1, this.option2, this.option3, this.option4];
    }
    messageDetailsComponent.prototype.onChange1 = function () {
        this.option1.isAnswer = !this.option1.isAnswer;
    };
    messageDetailsComponent.prototype.onChange2 = function () {
        this.option2.isAnswer = !this.option2.isAnswer;
        console.log(this.option2.isAnswer);
    };
    messageDetailsComponent.prototype.onChange3 = function () {
        this.option3.isAnswer = !this.option3.isAnswer;
    };
    messageDetailsComponent.prototype.onChange4 = function () {
        this.option4.isAnswer = !this.option4.isAnswer;
    };
    messageDetailsComponent.prototype.submitQuestion = function () {
        var _this = this;
        if (backend_service_1.BackendService.instructor == true) {
            this.firebaseService.addQuestion(this.question.name, this.question.Tags, this.question.questionTypeId, this.question.options, this.question.UID).then(function (message) {
                alert(message);
                console.log("Question created ");
                _this.router.navigate(["search"]);
            });
        }
        else {
            this.firebaseService.addQuestionRequest(this.question.name, this.question.Tags, this.question.questionTypeId, this.question.options, this.question.UID, backend_service_1.BackendService.studentNum).then(function (message) {
                alert(message);
                console.log("Question created ");
                _this.router.navigate(["search"]);
            });
        }
        // console.log(this.option1.isAnswer);
        // console.log(this.option2.isAnswer);
        // console.log(this.option3.isAnswer);
        // console.log(this.option4.isAnswer);
    };
    messageDetailsComponent.prototype.ngOnInit = function () {
        this.request$ = this.firebaseService.getRequest(this.rid);
    };
    messageDetailsComponent = __decorate([
        core_1.Component({
            selector: "messageDetails",
            moduleId: module.id,
            templateUrl: 'messageDetails.component.html',
            styleUrls: ["./messageDetails.component.css"]
        }),
        __metadata("design:paramtypes", [router_extensions_1.RouterExtensions,
            services_1.FirebaseService,
            router_1.Router, router_2.ActivatedRoute])
    ], messageDetailsComponent);
    return messageDetailsComponent;
}());
exports.messageDetailsComponent = messageDetailsComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZURldGFpbHMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWVzc2FnZURldGFpbHMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQXdDO0FBRXhDLCtCQUFtRDtBQUVuRCx3Q0FBNEM7QUFFNUMsbUZBQWlGO0FBS2pGLDBDQUF1QztBQUt2QywrREFBNkQ7QUFHN0QsMENBQStDO0FBVy9DO0lBVUcsaUNBQW9CLGdCQUFrQyxFQUM3QyxlQUFnQyxFQUNoQyxNQUFjLEVBQVUsS0FBcUI7UUFGdEQsaUJBcUNFO1FBckNrQixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQzdDLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQUNoQyxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQVUsVUFBSyxHQUFMLEtBQUssQ0FBZ0I7UUFFakQsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLFVBQUEsTUFBTTtZQUNuQyxLQUFJLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM3QixDQUFDLENBQUMsQ0FBQTtRQUVGLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxVQUFPLEVBQUUsQ0FBQztRQUN6QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUU7UUFDekIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBRTlCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxVQUFPLEVBQUUsQ0FBQztRQUM3QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUM7UUFDeEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBRTlCLElBQUksQ0FBQyxP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LElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUN2RyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxnQ0FBYyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFDLE9BQVc7Z0JBRWxGLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFFZixPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUM7Z0JBQ2pDLEtBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNuQyxDQUFDLENBQUMsQ0FBQTtRQUNWLENBQUM7UUFDSCxzQ0FBc0M7UUFDdEMsc0NBQXNDO1FBQ3RDLHNDQUFzQztRQUN0QyxzQ0FBc0M7SUFJMUMsQ0FBQztJQUVELDBDQUFRLEdBQVI7UUFDSSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUU5RCxDQUFDO0lBcEdRLHVCQUF1QjtRQVBuQyxnQkFBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLGdCQUFnQjtZQUMxQixRQUFRLEVBQUUsTUFBTSxDQUFDLEVBQUU7WUFDbkIsV0FBVyxFQUFFLCtCQUErQjtZQUM1QyxTQUFTLEVBQUUsQ0FBQyxnQ0FBZ0MsQ0FBQztTQUNoRCxDQUFDO3lDQVl1QyxvQ0FBZ0I7WUFDNUIsMEJBQWU7WUFDeEIsZUFBTSxFQUFpQix1QkFBYztPQVo1Qyx1QkFBdUIsQ0F3R25DO0lBQUQsOEJBQUM7Q0FBQSxBQXhHRCxJQXdHQztBQXhHWSwwREFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcy9PYnNlcnZhYmxlJztcclxuaW1wb3J0IHtVc2VyLCBRdWVzdGlvbiwgT3B0aW9uc30gZnJvbSAnLi4vbW9kZWxzLyc7XHJcbmltcG9ydCB7Q2xhc3Nyb29tfSBmcm9tICcuLi9tb2RlbHMvQ2xhc3Nyb29tLm1vZGVsJ1xyXG5pbXBvcnQge0ZpcmViYXNlU2VydmljZX0gZnJvbSAnLi4vc2VydmljZXMnO1xyXG5pbXBvcnQge3Byb21wdH0gZnJvbSBcInVpL2RpYWxvZ3NcIjtcclxuaW1wb3J0IHsgUm91dGVyRXh0ZW5zaW9ucyB9IGZyb20gJ25hdGl2ZXNjcmlwdC1hbmd1bGFyL3JvdXRlci9yb3V0ZXItZXh0ZW5zaW9ucyc7XHJcbmltcG9ydCB7IEV2ZW50RGF0YSB9IGZyb20gXCJkYXRhL29ic2VydmFibGVcIjtcclxuaW1wb3J0IHsgUmFkU2lkZURyYXdlciB9IGZyb20gXCJuYXRpdmVzY3JpcHQtcHJvLXVpL3NpZGVkcmF3ZXJcIjtcclxuaW1wb3J0IHsgdG9wbW9zdCB9IGZyb20gXCJ1aS9mcmFtZVwiO1xyXG5pbXBvcnQgeyBOYXZpZ2F0ZWREYXRhLCBQYWdlLCAgfSBmcm9tIFwidWkvcGFnZVwiO1xyXG5pbXBvcnQge1JvdXRlcn0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuaW1wb3J0IGZpcmViYXNlID0gcmVxdWlyZShcIm5hdGl2ZXNjcmlwdC1wbHVnaW4tZmlyZWJhc2VcIik7XHJcbmltcG9ydCB7IE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvc3JjL21ldGFkYXRhL2xpZmVjeWNsZV9ob29rcyc7XHJcbmltcG9ydCBvYnNlcnZhYmxlTW9kdWxlID0gcmVxdWlyZShcImRhdGEvb2JzZXJ2YWJsZVwiKTtcclxuaW1wb3J0IG9ic2VydmFibGUgPSByZXF1aXJlKFwiZGF0YS9vYnNlcnZhYmxlXCIpO1xyXG5pbXBvcnQgeyBCYWNrZW5kU2VydmljZSB9IGZyb20gXCIuLi9zZXJ2aWNlcy9iYWNrZW5kLnNlcnZpY2VcIjtcclxuaW1wb3J0IHsgRHJhd2VyVHJhbnNpdGlvbkJhc2UsIFNsaWRlSW5PblRvcFRyYW5zaXRpb24gfSBmcm9tIFwibmF0aXZlc2NyaXB0LXByby11aS9zaWRlZHJhd2VyXCI7XHJcbmltcG9ydCB7IFJhZFNpZGVEcmF3ZXJDb21wb25lbnQgfSBmcm9tIFwibmF0aXZlc2NyaXB0LXByby11aS9zaWRlZHJhd2VyL2FuZ3VsYXJcIjtcclxuaW1wb3J0IHtBY3RpdmF0ZWRSb3V0ZX0gZnJvbSBcIkBhbmd1bGFyL3JvdXRlclwiO1xyXG5cclxuXHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiBcIm1lc3NhZ2VEZXRhaWxzXCIsXHJcbiAgICBtb2R1bGVJZDogbW9kdWxlLmlkLFxyXG4gICAgdGVtcGxhdGVVcmw6ICdtZXNzYWdlRGV0YWlscy5jb21wb25lbnQuaHRtbCcsXHJcbiAgICBzdHlsZVVybHM6IFtcIi4vbWVzc2FnZURldGFpbHMuY29tcG9uZW50LmNzc1wiXVxyXG59KVxyXG5cclxuZXhwb3J0IGNsYXNzIG1lc3NhZ2VEZXRhaWxzQ29tcG9uZW50e1xyXG5cclxuICAgcHVibGljIHF1ZXN0aW9uIDogUXVlc3Rpb247XHJcbiAgIHB1YmxpYyBvcHRpb24xIDogT3B0aW9ucztcclxuICAgcHVibGljIG9wdGlvbjIgOiBPcHRpb25zO1xyXG4gICBwdWJsaWMgb3B0aW9uMyA6IE9wdGlvbnM7XHJcbiAgIHB1YmxpYyBvcHRpb240IDogT3B0aW9ucztcclxuICAgcHVibGljIHJpZDtcclxuICAgcHVibGljIHRuYW1lO1xyXG5cclxuICAgY29uc3RydWN0b3IocHJpdmF0ZSByb3V0ZXJFeHRlbnNpb25zOiBSb3V0ZXJFeHRlbnNpb25zLFxyXG4gICAgcHJpdmF0ZSBmaXJlYmFzZVNlcnZpY2U6IEZpcmViYXNlU2VydmljZSxcclxuICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsIHByaXZhdGUgcm91dGU6IEFjdGl2YXRlZFJvdXRlXHJcbiAgICApIHtcclxuICAgICAgICB0aGlzLnJvdXRlLnF1ZXJ5UGFyYW1zLnN1YnNjcmliZShwYXJhbXMgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnJpZCA9IHBhcmFtc1tcIlJpZFwiXTtcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICB0aGlzLm9wdGlvbjEgPSBuZXcgT3B0aW9ucygpO1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbjEubmFtZSA9IFwiXCI7XHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9uMS5xdWVzdGlvbklkIDtcclxuICAgICAgICAgICAgdGhpcy5vcHRpb24xLmlzQW5zd2VyID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbjIgPSBuZXcgT3B0aW9ucygpO1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbjIubmFtZSA9IFwiXCI7XHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9uMi5xdWVzdGlvbklkO1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbjIuaXNBbnN3ZXIgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9uMyA9IG5ldyBPcHRpb25zKCk7XHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9uMy5uYW1lID0gXCJcIjtcclxuICAgICAgICAgICAgdGhpcy5vcHRpb24zLnF1ZXN0aW9uSWQ7XHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9uMy5pc0Fuc3dlciA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5vcHRpb240ID0gbmV3IE9wdGlvbnMoKTtcclxuICAgICAgICAgICAgdGhpcy5vcHRpb240Lm5hbWUgPSBcIlwiO1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbjQucXVlc3Rpb25JZCA7XHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9uNC5pc0Fuc3dlciA9IGZhbHNlO1xyXG5cclxuICAgICAgICB0aGlzLnF1ZXN0aW9uID0gbmV3IFF1ZXN0aW9uKCk7XHJcbiAgICAgICAgICAgIHRoaXMucXVlc3Rpb24ubmFtZT0gXCJcIjtcclxuICAgICAgICAgICAgdGhpcy5xdWVzdGlvbi5xdWVzdGlvblR5cGVJZDsgLy9yZWNpZXZlcyB0YWcgaWQgZnJvbSB0YWcgcGFnZVxyXG4gICAgICAgICAgICB0aGlzLnF1ZXN0aW9uLlRhZ3MgPSB0aGlzLnRuYW1lOyAvL3JlY2lldmUgdGFnIG5hbWUgZnJvbSB0YWcgcGFnZVxyXG4gICAgICAgICAgICB0aGlzLnF1ZXN0aW9uLkNJRD0gQmFja2VuZFNlcnZpY2UuQ0lEO1xyXG4gICAgICAgICAgICB0aGlzLnF1ZXN0aW9uLlVJRD0gQmFja2VuZFNlcnZpY2UudG9rZW47XHJcbiAgICAgICAgICAgIHRoaXMucXVlc3Rpb24ub3B0aW9ucyA9IFt0aGlzLm9wdGlvbjEsIHRoaXMub3B0aW9uMiwgdGhpcy5vcHRpb24zLCB0aGlzLm9wdGlvbjRdO1xyXG4gICAgICAgICAgIFxyXG5cclxuICAgIH1cclxuXHJcbiAgICBcclxuICAgIHB1YmxpYyByZXF1ZXN0JDogT2JzZXJ2YWJsZTxhbnk+O1xyXG4gICAgcHVibGljIGNsYXNzcm9vbXMkOiBPYnNlcnZhYmxlPGFueT47XHJcblxyXG5cclxuICAgIHB1YmxpYyBvbkNoYW5nZTEoKXtcclxuICAgIHRoaXMub3B0aW9uMS5pc0Fuc3dlciA9ICF0aGlzLm9wdGlvbjEuaXNBbnN3ZXI7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG9uQ2hhbmdlMigpe1xyXG4gICAgICAgIHRoaXMub3B0aW9uMi5pc0Fuc3dlciA9ICF0aGlzLm9wdGlvbjIuaXNBbnN3ZXI7XHJcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5vcHRpb24yLmlzQW5zd2VyKTtcclxuICAgICAgICB9XHJcbiAgICBwdWJsaWMgb25DaGFuZ2UzKCl7XHJcbiAgICAgICAgdGhpcy5vcHRpb24zLmlzQW5zd2VyID0gIXRoaXMub3B0aW9uMy5pc0Fuc3dlcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgcHVibGljIG9uQ2hhbmdlNCgpe1xyXG4gICAgICAgIHRoaXMub3B0aW9uNC5pc0Fuc3dlciA9ICF0aGlzLm9wdGlvbjQuaXNBbnN3ZXI7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgcHVibGljIHN1Ym1pdFF1ZXN0aW9uKCl7XHJcblxyXG4gICAgICAgIGlmIChCYWNrZW5kU2VydmljZS5pbnN0cnVjdG9yID09IHRydWUpe1xyXG4gICAgICAgIHRoaXMuZmlyZWJhc2VTZXJ2aWNlLmFkZFF1ZXN0aW9uKHRoaXMucXVlc3Rpb24ubmFtZSx0aGlzLnF1ZXN0aW9uLlRhZ3MsIHRoaXMucXVlc3Rpb24ucXVlc3Rpb25UeXBlSWQsXHJcbiAgICAgICAgdGhpcy5xdWVzdGlvbi5vcHRpb25zLCB0aGlzLnF1ZXN0aW9uLlVJRCkudGhlbigobWVzc2FnZTphbnkpID0+IHtcclxuICAgICAgXHJcbiAgICAgICAgICAgIGFsZXJ0KG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlF1ZXN0aW9uIGNyZWF0ZWQgXCIpO1xyXG4gICAgICAgICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbXCJzZWFyY2hcIl0pO1xyXG4gICAgICAgICAgfSkgfWVsc2V7XHJcbiAgICAgICAgICAgIHRoaXMuZmlyZWJhc2VTZXJ2aWNlLmFkZFF1ZXN0aW9uUmVxdWVzdCh0aGlzLnF1ZXN0aW9uLm5hbWUsdGhpcy5xdWVzdGlvbi5UYWdzLCB0aGlzLnF1ZXN0aW9uLnF1ZXN0aW9uVHlwZUlkLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5xdWVzdGlvbi5vcHRpb25zLCB0aGlzLnF1ZXN0aW9uLlVJRCwgQmFja2VuZFNlcnZpY2Uuc3R1ZGVudE51bSkudGhlbigobWVzc2FnZTphbnkpID0+IHtcclxuICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBhbGVydChtZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJRdWVzdGlvbiBjcmVhdGVkIFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbXCJzZWFyY2hcIl0pO1xyXG4gICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMub3B0aW9uMS5pc0Fuc3dlcik7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2codGhpcy5vcHRpb24yLmlzQW5zd2VyKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLm9wdGlvbjMuaXNBbnN3ZXIpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMub3B0aW9uNC5pc0Fuc3dlcik7XHJcblxyXG5cclxuXHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5yZXF1ZXN0JCA9IHRoaXMuZmlyZWJhc2VTZXJ2aWNlLmdldFJlcXVlc3QodGhpcy5yaWQpO1xyXG5cclxuICAgIH1cclxuXHJcblxyXG5cclxufSJdfQ==